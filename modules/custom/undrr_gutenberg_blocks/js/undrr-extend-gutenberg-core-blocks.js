/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/
"use strict";

function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var _React = React,
  useCallback = _React.useCallback,
  useEffect = _React.useEffect;
var _wp = wp,
  blocks = _wp.blocks,
  data = _wp.data,
  element = _wp.element,
  components = _wp.components,
  blockEditor = _wp.blockEditor;
var createHigherOrderComponent = wp.compose.createHigherOrderComponent;
var registerBlockType = blocks.registerBlockType,
  createBlock = blocks.createBlock;
var dispatch = data.dispatch,
  select = data.select,
  useDispatch = data.useDispatch,
  useSelect = data.useSelect;
var useState = element.useState,
  Fragment = element.Fragment;
var Button = components.Button,
  PanelBody = components.PanelBody,
  SelectControl = components.SelectControl,
  BaseControl = components.BaseControl,
  CheckboxControl = components.CheckboxControl;
var InnerBlocks = blockEditor.InnerBlocks,
  InspectorControls = blockEditor.InspectorControls,
  useBlockProps = blockEditor.useBlockProps;
var __ = Drupal.t;
var setSidebarSelectAttribute = function setSidebarSelectAttribute(settings, name) {
  return Object.assign({}, settings, {
    attributes: Object.assign({}, settings.attributes, {
      utilityClasses: {
        type: 'array'
      }
    })
  });
};
wp.hooks.addFilter('blocks.registerBlockType', 'custom-attributes/set-sidebar-select-attribute', setSidebarSelectAttribute);
var withUtilitySelect = createHigherOrderComponent(function (BlockEdit) {
  return function (props) {
    var attributes = props.attributes,
      setAttributes = props.setAttributes;
    var utilityClasses = attributes.utilityClasses;
    var checkboxes = [{
      name: 'mg-container-full-width',
      label: 'Full width container',
      description: 'Add the mg-container-full-width class. '
    }, {
      name: 'mg-u-sr-only',
      label: 'Show for Screen Readers only',
      description: 'Add the mg-u-sr-only class. '
    }, {
      name: 'pt-20 pb-20',
      label: 'Extra padding (top bottom)',
      description: 'Add the pt-20 pb-20 classses. '
    }];
    var Checkbox = function Checkbox(_ref) {
      var _ref$type = _ref.type,
        type = _ref$type === void 0 ? 'checkbox' : _ref$type,
        name = _ref.name,
        label = _ref.label,
        description = _ref.description,
        _ref$checked = _ref.checked,
        checked = _ref$checked === void 0 ? false : _ref$checked,
        onChange = _ref.onChange;
      return React.createElement("div", {
        class: "components-base-control"
      }, React.createElement("label", null, React.createElement("input", {
        label: label,
        type: type,
        class: "components-checkbox-control__input",
        name: name,
        checked: checked,
        onChange: onChange
      }), ' ', label), React.createElement("small", null, description));
    };
    function removeItemFromArray(arr, value) {
      return arr.filter(function (item) {
        return item !== value;
      });
    }
    attributes.utilityClasses = utilityClasses || [];
    return React.createElement(Fragment, null, React.createElement(BlockEdit, props), React.createElement(InspectorControls, null, React.createElement(PanelBody, {
      title: __('Styling toolbox')
    }, React.createElement(React.Fragment, null, checkboxes.map(function (item) {
      return React.createElement(Checkbox, {
        label: item.label,
        name: item.name,
        description: item.description,
        checked: attributes.utilityClasses.includes(item.name),
        onChange: function onChange(value) {
          var utilityClasses = attributes.utilityClasses || [];
          var item = value.target.name;
          var isChecked = value.target.checked;
          if (isChecked) {
            if (!utilityClasses.includes(item.name)) {
              utilityClasses.push(item);
            }
          } else {
            utilityClasses = removeItemFromArray(utilityClasses, item);
          }
          setAttributes({
            utilityClasses: utilityClasses,
            date: new Date()
          });
        }
      });
    })))));
  };
}, 'withUtilitySelect');
wp.hooks.addFilter('editor.BlockEdit', 'custom-attributes/with-sidebar-select', withUtilitySelect);
var withUtilitySelectProp = createHigherOrderComponent(function (BlockListBlock) {
  return function (props) {
    var attributes = props.attributes;
    var utilityClasses = attributes.utilityClasses;
    if (utilityClasses) {
      return React.createElement(BlockListBlock, _extends({}, props, {
        className: ' ' + utilityClasses.join(' ')
      }));
    } else {
      return React.createElement(BlockListBlock, props);
    }
  };
}, 'withUtilitySelectProp');
wp.hooks.addFilter('editor.BlockListBlock', 'custom-attributes/with-utility-select-prop', withUtilitySelectProp);
var saveUtilityClasses = function saveUtilityClasses(extraProps, blockType, attributes) {
  var utilityClasses = attributes.utilityClasses;
  if (utilityClasses) {
    extraProps.className = extraProps.className + ' ' + utilityClasses.join(' ');
  }
  return extraProps;
};
wp.hooks.addFilter('blocks.getSaveContent.extraProps', 'custom-attributes/save-utility-classes', saveUtilityClasses);